import { __awaiter } from 'tslib';
import { CommonModule } from '@angular/common';
import { createConnection } from 'typeorm';
import { APP_BOOTSTRAP_LISTENER, NgModule } from '@angular/core';

// @dynamic
class AngularTypeormModule {
    /**
     * @param duration time in seconds
     * @description Pause for given amount of time
     */
    static wait(duration) {
        return new Promise((resolve, __) => {
            setTimeout(() => {
                resolve();
            }, duration * 1000);
        });
    }
    /**
     * @param configs  connection options
     * @description Initialize TypeOrm connection for root
     */
    static forRoot(configs) {
        return {
            ngModule: AngularTypeormModule,
            providers: [
                {
                    provide: APP_BOOTSTRAP_LISTENER,
                    useFactory: () => () => __awaiter(this, void 0, void 0, function* () {
                        let retryCount = 0;
                        while (true) {
                            try {
                                return yield createConnection(configs);
                            }
                            catch (err) {
                                retryCount += 1;
                                console.error(`TYPEORM CONNECTION ATTEMPT ${retryCount} FAILED: `, err);
                                yield this.wait(5);
                                continue;
                            }
                        }
                    }),
                    multi: true,
                },
            ],
        };
    }
}
AngularTypeormModule.decorators = [
    { type: NgModule, args: [{
                exports: [],
                providers: [],
                declarations: [],
                imports: [CommonModule],
            },] }
];

/*
 * Public API Surface of angular-typeorm
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularTypeormModule };
//# sourceMappingURL=angular-typeorm.js.map
